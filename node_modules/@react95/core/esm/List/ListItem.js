var _excluded = ["icon", "children"];

var _templateObject, _templateObject2;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { forwardRef } from 'react';
import styled, { css } from '@xstyled/styled-components';
import { th } from '@xstyled/system';
import rightcaret from '../GlobalStyle/imgs/rightcaret.svg';
var Item = styled.li(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  margin: 0;\n  padding: 2 6;\n\n  color: materialText;\n\n  img {\n    margin-right: 10;\n  }\n\n  &:hover {\n    background: ", ";\n    color: ", ";\n  }\n\n  ul {\n    display: none;\n    position: absolute;\n    top: -2px;\n    left: 97%;\n    color: materialText;\n    z-index: taskbar;\n\n    img {\n      width: 18px;\n      height: 20px;\n      margin-right: 6;\n    }\n  }\n\n  svg {\n    fill: ", ";\n  }\n\n  ", ";\n\n  ", ";\n"])), th('colors.headerBackground'), th('colors.materialTextInvert'), th('colors.materialTextInvert'), function (_ref) {
  var icon = _ref.icon;
  return !icon && 'padding-left: 26px;';
}, function (_ref2) {
  var hasList = _ref2.hasList;
  return hasList && css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      &:after {\n        position: absolute;\n        width: 5px;\n        height: 8px;\n        right: 8px;\n\n        content: '';\n        background-color: ", ";\n        mask-image: url('", "');\n        mask-position: center center;\n        mask-size: 5px 8px;\n        mask-repeat: no-repeat;\n      }\n\n      &:hover {\n        &:after {\n          background-color: ", ";\n        }\n\n        ul {\n          display: block;\n        }\n      }\n    "])), th('colors.materialText'), rightcaret, th('colors.materialTextInvert'));
});
var ListItem = /*#__PURE__*/forwardRef(function (_ref3, ref) {
  var icon = _ref3.icon,
      _ref3$children = _ref3.children,
      children = _ref3$children === void 0 ? [] : _ref3$children,
      rest = _objectWithoutProperties(_ref3, _excluded);

  return /*#__PURE__*/React.createElement(Item, _extends({}, rest, {
    icon: !!icon,
    ref: ref,
    hasList: Boolean(children && React.Children.map(children, function (child) {
      return /*#__PURE__*/React.isValidElement(child);
    }).some(function (child) {
      return child;
    }))
  }), icon, children);
});
ListItem.displayName = 'List.Item';
export default ListItem;