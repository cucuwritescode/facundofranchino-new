import { css } from 'styled-components';
import { scrollBarBorder } from './Borders';
export var createTriangleSVG = function createTriangleSVG(color) {
  var angle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var svg = "<svg height=\"21\" width=\"21\" viewBox=\"0 0 21 21\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <g transform=\"rotate(".concat(angle, " 13 13)\">\n      <polygon fill=\"").concat(color, "\" points=\"6,10 20,10 13,17\"/>\n    </g>\n  </svg>");
  var encoded = typeof window != 'undefined' ? window.btoa(svg) : '';
  return "url(data:image/svg+xml;base64,".concat(encoded, ")");
}; // TODO for flat box styles add checkered background when disabled (not solid color)

export var createHatchedBackground = function createHatchedBackground(_ref) {
  var _ref$mainColor = _ref.mainColor,
      mainColor = _ref$mainColor === void 0 ? 'black' : _ref$mainColor,
      _ref$secondaryColor = _ref.secondaryColor,
      secondaryColor = _ref$secondaryColor === void 0 ? 'transparent' : _ref$secondaryColor,
      _ref$pixelSize = _ref.pixelSize,
      pixelSize = _ref$pixelSize === void 0 ? 2 : _ref$pixelSize;
  return css(["background-image:", ";background-color:", ";background-size:", ";background-position:0 0,", ";"], ["linear-gradient(\n      45deg,\n      ".concat(mainColor, " 25%,\n      transparent 25%,\n      transparent 75%,\n      ").concat(mainColor, " 75%\n    )"), "linear-gradient(\n      45deg,\n      ".concat(mainColor, " 25%,\n      transparent 25%,\n      transparent 75%,\n      ").concat(mainColor, " 75%\n    )")].join(','), secondaryColor, "".concat(pixelSize * 2, "px ").concat(pixelSize * 2, "px"), "".concat(pixelSize, "px ").concat(pixelSize, "px"));
};
export var scrollbars = css(["::-webkit-scrollbar{width:17;height:17;}::-webkit-scrollbar-track{", "}::-webkit-scrollbar-thumb{box-sizing:border-box;display:inline-block;background:", ";color:", ";", "}::-webkit-scrollbar-corner{background-color:", ";}::-webkit-scrollbar-button{box-sizing:border-box;display:inline-block;background:", ";color:", ";", " display:block;outline-offset:-2px;height:17;width:17;background-repeat:no-repeat;background-size:80%;background-position:0 0;}::-webkit-scrollbar-button:active,::-webkit-scrollbar-button:active{background-position:0 1;", "}::-webkit-scrollbar-button:horizontal:increment:start,::-webkit-scrollbar-button:horizontal:decrement:end,::-webkit-scrollbar-button:vertical:increment:start,::-webkit-scrollbar-button:vertical:decrement:end{display:none;}::-webkit-scrollbar-button:horizontal:decrement{background-image:", ";}::-webkit-scrollbar-button:horizontal:increment{background-image:", ";}::-webkit-scrollbar-button:vertical:decrement{background-image:", ";}::-webkit-scrollbar-button:vertical:increment{background-image:", ";}"], function (_ref2) {
  var theme = _ref2.theme;
  return createHatchedBackground({
    mainColor: theme.colors.material,
    secondaryColor: theme.colors.borderLightest
  });
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.colors.material;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.colors.materialText;
}, scrollBarBorder(), function (_ref5) {
  var theme = _ref5.theme;
  return theme.colors.material;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.colors.material;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.colors.materialText;
}, scrollBarBorder(), scrollBarBorder(), function (_ref8) {
  var theme = _ref8.theme;
  return createTriangleSVG(theme.colors.materialText, 90);
}, function (_ref9) {
  var theme = _ref9.theme;
  return createTriangleSVG(theme.colors.materialText, 270);
}, function (_ref10) {
  var theme = _ref10.theme;
  return createTriangleSVG(theme.colors.materialText, 180);
}, function (_ref11) {
  var theme = _ref11.theme;
  return createTriangleSVG(theme.colors.materialText, 0);
});